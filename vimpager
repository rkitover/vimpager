#!/bin/sh

# Script for using ViM as a PAGER.
# Based on Bram's less.sh.
# Version 1.7.5
# git://github.com/rkitover/vimpager.git

# Just pass through if not on a tty
if [ ! -t 1 ]; then
	exec cat "${@}"
fi

case $(uname -s) in
	Linux) linux=1 ;;
	SunOS) solaris=1 ;;
        Darwin) osx=1; bsd=1 ;;
	CYGWIN*) cygwin=1 ;;
	MINGW*) msys=1 ;;
	OpenBSD) openbsd=1; bsd=1 ;;
	*) bsd=1 ;;
esac

# Use the real TEMP directory on windows in case we are using a native vim/gvim
tmp=/tmp
[ -n "${msys}" -o -n "${cygwin}" ] && tmp=$(printf "%s\n" "${TEMP}" | tr '\\' /)

# Detect terminal size
if command -v tput > /dev/null; then
	# this is the only way it works on Cygwin
	trap "rm -f /tmp/vimpager_cols_${$} /tmp/vimpager_lines_${$}" HUP INT QUIT ILL TRAP KILL BUS TERM

	tput cols  > /tmp/vimpager_cols_${$}
	tput lines > /tmp/vimpager_lines_${$}

	cols=$(cat /tmp/vimpager_cols_${$})
	lines=$(cat /tmp/vimpager_lines_${$})

	rm -f /tmp/vimpager_cols_${$} /tmp/vimpager_lines_${$}
fi

# msys has no tput, this doesn't work on Cygwin by the way
if [ -z "${cols}" ] && command -v bash >/dev/null; then
	cols=$(bash -i -c 'echo ${COLUMNS}')
	lines=$(bash -i -c 'echo ${LINES}')
fi

# If we are unable to detect lines/columns, maximize
# the window.
if [ -z "${cols}" ]; then
	cols=999
	lines=999
	no_pass_thru=1 # force loading vimpager
fi

# determine location of vimrc
if [ -n "${VIMPAGER_RC}" ]; then
	vimrc=${VIMPAGER_RC}
elif [ -f ~/.vimpagerrc ]; then
	vimrc=~/.vimpagerrc
elif [ -f ~/_vimpagerrc ]; then
	vimrc=~/_vimpagerrc
elif [ -f /etc/vimpagerrc ]; then
	vimrc=/etc/vimpagerrc
fi

if [ -z "${vimrc}" ]; then
	trap "rm -f ${tmp}/vimpager_vimrc_${$}" HUP INT QUIT ILL TRAP KILL BUS TERM

	vim -E -c 'call writefile([ $MYVIMRC ], "'${tmp}'/vimpager_vimrc_'${$}'") | q' </dev/tty
	vimrc=$(head -1 ${tmp}/vimpager_vimrc_${$})

	rm -f ${tmp}/vimpager_vimrc_${$}
fi

[ -z "${vimrc}" ] && vimrc=NORC

# read settings
trap "rm -f ${tmp}/vimpager_opts_${$}" HUP INT QUIT ILL TRAP KILL BUS TERM

vim -u ${vimrc} -E --cmd 'set nocp' -c '
	if !exists("vimpager_use_gvim")
		let vimpager_use_gvim=0
	endif
	
	if !exists("vimpager_disable_x11")
		let vimpager_disable_x11=0
	endif
	
	if !exists("vimpager_scrolloff")
		let vimpager_scrolloff=5
	endif
	
	if !exists("vimpager_passthrough")
		let vimpager_passthrough=0
	endif

	call writefile([ vimpager_use_gvim, vimpager_disable_x11, vimpager_scrolloff, vimpager_passthrough, $VIM ], "'${tmp}'/vimpager_opts_'${$}'")
	
	quit
' </dev/tty

[ "$(head -1 < ${tmp}/vimpager_opts_${$})" = 1 ] && use_gvim=1

[ "$(head -2 < ${tmp}/vimpager_opts_${$} | tail -1)" = 1 ] && disable_x11=1

scrolloff=$(head -3 < ${tmp}/vimpager_opts_${$} | tail -1)

[ "$(head -4 < ${tmp}/vimpager_opts_${$} | tail -1)" = 0 ] && no_pass_thru=1

if [ "${no_pass_thru}" = 0 ]; then
	# check if arithmetic expansion works, passthrough mode relies on it
	if [ x$(echo $((2+2)) 2>/dev/null) != x4 ]; then
		no_pass_thru=1
	fi
fi

vim_dir=$(head -5 < ${tmp}/vimpager_opts_${$} | tail -1)

rm -f ${tmp}/vimpager_opts_${$}

if [ -n "${msys}" -o -n "${cygwin}" ]; then
	# msys/cygwin may be using a native vim, and if we're not in a real
	# console the native vim will not work, so we have to use gvim.

	if [ "x${TERM}" != "xdumb" -a "x${TERM}" != "xcygwin" -a "x${TERM}" != "x" ]; then
		if command -v vim 2>/dev/null | awk '$1 ~ /^\/(cygdrive\/)?[a-z]\// {t=1} END {exit 1-t}'; then
			use_gvim=1
		fi
	fi
fi

if [ -n "${use_gvim}" ]; then
	# find the .gvimrc
	[ -e ${HOME}/.gvimrc ] && gvimrc=${HOME}/.gvimrc

	if [ -n "${msys}" -o -n "${cygwin}" ]; then
		if command -v gvim 2>/dev/null | awk '$1 ~ /^\/(cygdrive\/)?[a-z]\// {t=1} END {exit 1-t}'; then
			win32_native_gvim=1

			if [ -e ${HOME}/_gvimrc ]; then
				gvimrc=${HOME}/_gvimrc
			elif [ -z "${gvimrc}" ]; then
				if [ -e "${vim_dir}/_gvimrc" ]; then
					gvimrc=${vim_dir}/_gvimrc
				elif [ -e "${vim_dir}/.gvimrc" ]; then
					gvimrc=${vim_dir}/.gvimrc
				fi
			fi
		fi
	fi

	# determine if this is an ssh session and/or $DISPLAY is set
	if [ -n "${osx}" ]; then
		if [ -z "${SSH_CONNECTION}" ] && command -v mvim >/dev/null; then
			vim_cmd="mvim -R"
		else
			vim_cmd="vim -R"
		fi
	elif [ -n "${cygwin}" ]; then
		if command -v gvim >/dev/null; then
			# The Cygwin gvim uses X
			if [ -z "${win32_native_gvim}" ]; then
				if [ -z "${DISPLAY}" ]; then
					vim_cmd="vim -R"
				else
					vim_cmd='gvim -R'
				fi
			elif [ -z "${SSH_CONNECTION}" ]; then
				vim_cmd='gvim -R'
			else
				vim_cmd="vim -R"
			fi
		else
			vim_cmd="vim -R"
		fi
	elif [ -n "${msys}" ]; then
		if [ -z "${SSH_CONNECTION}" ] && command -v gvim >/dev/null; then
			vim_cmd='gvim -R'
		else
			vim_cmd="vim -R"
		fi
	elif [ -z "${DISPLAY}" ]; then
		vim_cmd='vim -R'
	else
		if command -v gvim >/dev/null; then
			vim_cmd='gvim -R'
		else
			vim_cmd="vim -R"
		fi
	fi
else
	vim_cmd='vim -R'
fi

rm -f gvim.exe.stackdump # for cygwin gvim, which can be part of vim

less_vim() {
	case ${vim_cmd} in
		vim*)
			if [ -n "${disable_x11}" ]; then
				vim_cmd="${vim_cmd} -X"
			fi

			${vim_cmd} \
				-u ${vimrc} \
				--cmd 'let vimpager=1 | runtime! macros/less.vim | set nocp' \
				-c "set scrolloff=${scrolloff:-5} | set foldlevel=999 | set nonu | silent! set nornu |
				    nmap <ESC>u :nohlsearch<cr> | noremap q :q<CR> | nnoremap <Down> 1<C-d> | nnoremap <Up> 1<C-u>" \
				"${@:--}"
			;;
		*) # gvim or mvim GUI
			[ -n "${gvimrc}" ] && colors=$(grep guifg ${gvimrc} 2>/dev/null | head -1)

			# Check if the user maximized the window in ~/_gvimrc on Win32, if
			# so restore on startup.
			if [ -n "${gvimrc}" -a \( -n "${cygwin}" -o -n "${msys}" \) ]; then
				simalt=$(grep simalt ${gvimrc} 2>/dev/null | head -1)

				if [ -n "${simalt}" ]; then
					restore="simalt ~r"
				fi
			fi

			${vim_cmd} \
				-u ${vimrc} \
				--cmd 'let vimpager=1 | runtime! macros/less.vim | set nocp' \
				-c "set scrolloff=${scrolloff:-5} | set foldlevel=999 | set nonu | silent! set nornu |
				    nmap <ESC>u :nohlsearch<cr> | noremap q :q<CR> | nnoremap <Down> 1<C-d> | nnoremap <Up> 1<C-u> |
				    ${colors:-echo} | ${restore:-echo} | set lines=${lines} | set columns=${cols}" \
				"${@:--}" &
			;;
	esac

	rm -f gvim.exe.stackdump # for cygwin gvim, which can be part of vim
}

awk_pstree() {
	awk -v mypid=${1} '{
		cmd[$1]=$3
		ppid[$1]=$2
	}
	END {
		while (mypid != 1 && cmd[mypid]) {
			ptree=mypid " " cmd[mypid] "\n" ptree
			mypid=ppid[mypid]
		}
		print ptree
	}'
}

do_ptree() {
	if [ -n "${solaris}" ]; then
		# Tested on Solaris 8 and 10
		ptree ${$}
	elif [ -n "${cygwin}" -o -n "${msys}" ]; then
		ps | awk '{ print $1 "\t" $2 "\t" $NF }' | awk_pstree ${$}
	elif [ -n "${openbsd}" ]; then
		ps awo pid=,ppid=,command= | awk_pstree ${$}
	else
		# Tested on Linux and OS X
		ps awo pid=,ppid=,comm= | awk_pstree ${$}
	fi
}

# Check if called from man, perldoc or pydoc
if do_ptree | awk '$2 ~ /(^|\/)(man|perl(doc)?([0-9.]*)?|py(thon|doc|doc2))/ {t=1} END { exit 1-t }'; then
	extra_c="set ft=man"
fi

extra_cmd="let vimpager_ptree=[$(do_ptree | awk '{ print "\"" $2 "\"" }' | tr '\n' ',')] | call remove(vimpager_ptree, -1)"

trap "rm -rf ${tmp}/vimpager_${$}" HUP INT QUIT ILL TRAP KILL BUS TERM

mkdir -m 0700 ${tmp}/vimpager_${$}

command -v perl > /dev/null && \
	perl -le 'exit($] >= 5.008001 ? 0 : 1)' && have_perl=1

# Normally, filter outputs ANSI-escape-code-free content to STDERR.
# When content is short, filter outputs content with ANSI escape codes to STDOUT.
filter() {
	if [ -z "${no_pass_thru}" ]; then
		content=
		OLDIFS="${IFS}"
		# ts: tab stop
		# nl: number of physycal lines
		# dh: display height
		# dw: display width
		ts=8; nl=0; dh=$((lines-2)); dw=$((cols))

		while [ ${nl} -le ${dh} ]; do
			IFS='
'
			read -r line || exec printf %s "${content}"
			content="${content}${line}
"
			nl=$((nl+1))

			# w: line width
			# t: number of consecutive tabs
			w=0; t=$((2+${#line}+1))
			IFS='	'
			for a in .	${line}.
			do
				if [ ${w} -gt 0 ]; then
					w=$((w+ts-w%ts))
					t=$((t-1))
				fi
				w=$((w+${#a}))
				t=$((t-${#a}))
			done
			w=$((w-8+t*ts-1))

			nl=$((nl+(w-1)/dw))
		done
	fi
	IFS="${OLDIFS}"
	if [ "x${have_perl}" != "x" ]; then
		( printf %s "${content}"; exec /bin/cat ) | \
			sed -e 's/\[[^m]*m//g' "${@}" | \
			perl -CIOL -pe 'no warnings "utf8"; s/.\010//g' >&2
	else
		( printf %s "${content}"; exec /bin/cat ) | \
			sed -e 's/\[[^m]*m//g' "${@}" | \
			sed -e 's/.//g' >&2
	fi
}

filename=${@:-stdin}
filename=$(echo "${filename}" | tr '/' '_')
filename="${tmp}/vimpager_${$}/${filename}"

case "${@}" in
	*.gz) 
		filename=$(echo ${filename} | sed -e 's/\.gz$//')
		gunzip -c "${@}" | filter 2> "${filename}"
		;;
	*.bz2)
		filename=$(echo ${filename} | sed -e 's/\.bz2$//')
		bunzip2 -c "${@}" | filter 2> "${filename}"
		;;
	*.xz)
		filename=$(echo ${filename} | sed -e 's/\.xz$//')
		xzcat -c "${@}" | filter 2> "${filename}"
		;;
	*.Z)
		filename=$(echo ${filename} | sed -e 's/\.Z$//')
		uncompress -c "${@}" | filter 2> "${filename}"
		;;
	*)
		cat "${@:--}" | filter 2> "${filename}"
		;;
esac

# if file is zero length, or one blank line (cygwin) exit immediately
if [ \( ! -s "${filename}" \) \
	-o \( \( "$(cat "${filename}")" = "" \) \
	-a \( "$(wc -l "${filename}" | awk '{print $1}')" = "1" \) \) ]; then

	rm -rf "${tmp}/vimpager_${$}"
	exit
fi

# On cygwin it might be the win32 gvim, but windows paths work for cygwin
# vim just fine as well.
if [ -n "${cygwin}" ]; then
	filename=$(cygpath -w "${filename}")
fi

less_vim -c "${extra_c:-echo}" --cmd "${extra_cmd:-echo}" "${filename}" </dev/tty

# Give gvim/mvim time to open the file.
# On Win32 we must also wait for the process to exit before the file can
# be deleted.
(
	while [ -d ${tmp}/vimpager_${$} ]; do
		sleep 10
		rm -rf ${tmp}/vimpager_${$} 2>/dev/null
		rm -f gvim.exe.stackdump 2>/dev/null
	done
) &

# CONTRIBUTORS:
#
# Rafael Kitover
# Antonio Ospite
# Jean-Marie Gaillourdet
# Perry Hargrave
# Koen Smits
# Ivan S. Freitas <ivansichfreitas@gmail.com>
# Wout Mertens (Solaris compatibility, less processes)
# Jacobo de Vera (add -X option for faster startup)
# Damien Pollet <damien.pollet@gmail.com>
# Peter Fern <github@obfusc8.org>
# Wei Dai <x@wei23.net>
# Iftekharul Haque <iftekharul.haque@gmail.com>
# Anselm Strauss <amsibamsi@gmail.com>
# Anisse Astier <anisse@astier.eu>
# Simon Olofsson <simon@olofsson.de>
# lickel: Adam Lickel <adam@lickel.com>
# eworm-de: Christian Hesse <mail@eworm.de>

# vim:noet ts=8 sts=8 sw=8 tw=0:
