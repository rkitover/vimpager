#!/bin/sh
#!/usr/bin/env vim
#! This is a bash script that executes itself as a vimscript to do its work
#! Based on _v by Magnus Woldrich: https://github.com/trapd00r/utils/blob/master/_v

: if 0
  # try to find a better shell, especially on Solaris

  PATH="$PATH:/usr/local/bin:/opt/csw/bin:/opt/local/bin:/usr/dt/bin:/usr/xpg4/bin:/usr/bin:/bin"

  _MY_SHELL=/bin/sh
  export _MY_SHELL

  if [ -z "$IN_BASH" ] && command -v bash >/dev/null; then
    IN_BASH=1
    export IN_BASH
    _MY_SHELL=$(command -v bash)
    export _MY_SHELL
    exec bash "$0" "$@"
  elif [ -z "$IN_BASH" ] && [ -z "$IN_KSH" ]; then
    if command -v dtksh >/dev/null; then
      IN_KSH=1
      export IN_KSH
      _MY_SHELL=$(command -v dtksh)
      export _MY_SHELL
      exec dtksh "$0" "$@"
    elif [ -x /usr/xpg4/bin/sh ]; then
      IN_KSH=1
      export IN_KSH
      _MY_SHELL=/usr/xpg4/bin/sh
      export _MY_SHELL
      exec /usr/xpg4/bin/sh "$0" "$@"
    elif command -v ksh93 >/dev/null; then
      IN_KSH=1
      export IN_KSH
      _MY_SHELL=$(command -v ksh93)
      export _MY_SHELL
      exec ksh93 "$0" "$@"
    elif command -v ksh >/dev/null; then
      IN_KSH=1
      export IN_KSH
      _MY_SHELL=$(command -v ksh)
      export _MY_SHELL
      exec ksh "$0" "$@"
    else
      _MY_SHELL="${SHELL:-/bin/sh}"
    fi
  fi

  # hopefully we're now POSIX, and shell is saved in ${_MY_SHELL}

quit() {
  rm -rf "${tmp_dir}"
  exit "${@}"
}

usage() {
    cat <<'EOF'
Usage: [32mvimcat [1;34m[[1;35mOPTION[1;34m][0m... [1;34m[[1;35mFILE [1;37m| [1;35m-[1;34m][0m...
Display [1;35mFILE[0m(s) in the terminal with vim syntax highlighting using ANSI escape codes.

With no [1;35mFILE[0m, or when [1;35mFILE[0m is [1;35m-[0m, read standard input.

  [1;37m-h, --help, --usage[0m		This help screen.
  [1;37m-n[0m				Print with line numbers.
  [1;37m-s[0m				Squeeze multiple blank lines into one.
  [1;37m-o [1;35mFILE[0m | [1;35m-[0m			Output ANSI highlighted text to [1;35mFILE[0m or standard output.
  [1;37m--cmd [1;35mCOMMAND[0m			Run vim [1;35mCOMMAND[0m before initialization.
  [1;37m-c [1;35mCOMMAND[0m			Run vim [1;35mCOMMAND[0m after initialization.
  [1;37m-u [1;35mFILE[0m			Use [1;35mFILE[0m as the vimrc.

Examples:
  [32mvimcat [1;35mprogram.py[0m		# output [1;35mprogram.py[0m with highlighting to terminal

Project homepage: <[1;34mhttp://github.com/rkitover/vimpager[0m>
and documentation: <[1;34mhttps://github.com/rkitover/vimpager/blob/master/markdown/vimcat.md[0m>
or available locally via: [32mman [1;35mvimcat[0m
EOF
}

  # if no args and no stdin, display usage
  if [ "${#}" -eq 0 -a -t 0 ]; then
    usage
    quit 0
  fi

  # check for -h before main option parsing, this is much faster
  for arg in "${@}"; do
    case "${@}" in
      "-h"|"--help"|"-help"|"--usage"|"-usage")
        usage
        quit 0
        ;;
    esac
  done

  tmp_dir=/tmp
  mkdir_options="-m 700"

  case "$(uname -s)" in
    MINGW*|MSYS*)
      if [ -n "${temp}" ]; then
        # MSYS2 is a little tricky, we're gonna stick to the user's private temp
        # the -m mode switch to mkdir doesn't work
        tmp_dir="$(cygpath --unix "${temp}")"
        mkdir_options=""
      fi
    ;;
  esac

  tmp_dir="${tmp_dir}/vimcat_${$}"

  if ! mkdir ${mkdir_options} "${tmp_dir}"; then
    echo "Could not create temporary directory ${tmp_dir}" >&2
    exit 1
  fi

  trap "rm -rf ${tmp_dir}" HUP INT QUIT ILL TRAP KILL BUS TERM
  tmp_file_in="${tmp_dir}/vimcat_in.txt"
  tmp_file_out="${tmp_dir}/vimcat_out.txt"

  script="$(command -v ${0})"

  # check for arguments
  while [ "${#}" -gt 0 ] ; do
    case "${1}" in
      "-c")
        shift
        if [ -z "${extra_c}" ]; then
          extra_c="${1}"
        else
          extra_c="${extra_c} | ${1}"
        fi
        shift
        ;;
      "--cmd")
        shift
        if [ -z "${extra_cmd}" ]; then
          extra_cmd="${1}"
        else
          extra_cmd="${extra_cmd} | ${1}"
        fi
        shift
        ;;
      "-u")
        shift
        vimcatrc="${1}"
        shift
        ;;
      "-o")
        shift
        output_file="${1}"
        shift
        ;;
      "-s")
        shift
        squeeze_blank_lines=1
        ;;
      "-n")
        shift
        line_numbers=1
        ;;
      "--")
        shift
        break
        ;;
      -*)
        echo "${0}: bad option '${1}'"
        quit 1
        ;;
      *)
        break
        ;;
    esac
  done

  # Just pass through if not on a tty, unless -o was given
  if [ -z "${output_file}" ]; then
    if [ ! -t 1 ]; then
      exec cat "${@}"
    fi
  fi

  if [ -z "${vimcatrc}" ]; then
    if [ -f ~/.vimcatrc ]; then
        vimcatrc="~/.vimcatrc"
    else
        vimcatrc=""
    fi
  fi

  if [ -z "${extra_cmd}" ]; then
    extra_cmd='silent! echo'
  fi

  if [ -z "${extra_c}" ]; then
    extra_c='silent! echo'
  fi

  if [ -z "${line_numbers}" ]; then
    line_numbers=0
  fi

  if [ "${#}" -eq 0 ]; then
    set -- -
  fi

  for file in "$@"
  do
    if [ "${#}" -ge 2 ]; then
      echo "==> ${file} <=="
    fi

    if [ "${file}" = "-" ]; then
      cat - >"${tmp_file_in}"
      file="${tmp_file_in}"
    fi

    if [ "${squeeze_blank_lines}" = "1" ]; then
      cat -- "${file}" > "${tmp_file_in}.work"
      sed -e '/^[ 	]*$/{
				N
				/^[ 	]*\n[ 	]*$/D
      }' -- "${tmp_file_in}.work" > "${tmp_file_in}"
      rm -f -- "${tmp_file_in}.work"
      file="${tmp_file_in}"
    fi

    # Check that the file exists
    if test -r "${file}" -a -f "${file}"; then
      if test -s "${file}"; then
        if [ -z "${output_file}" -o "${output_file}" = "-" ]; then
          dest_file="${tmp_file_out}"
        else
          dest_file="${output_file}"
        fi

        if command -v vim >/dev/null; then
          vim=vim
        elif command -v nvim >/dev/null; then
          vim=nvim
        else
          echo "$0: neither vim nor nvim found, vim or nvim is required for vimcat" >&2
          quit 1
        fi

        if [ -n "${vimcatrc}" ]; then
          $vim -N -E -i NONE -n -u "${vimcatrc}" --cmd "visual | ${extra_cmd}" -c "set bg=dark fdl=9999 | syn enable | hi Normal ctermbg=NONE | silent! source ${script}" -c "set buftype=nowrite | ${extra_c} | call AnsiHighlight(\"${dest_file}\", \"${line_numbers}\") | qa!" -- "${file}" </dev/tty >/dev/null 2>&1
        else
          $vim -N -E -i NONE -n                  --cmd "visual | ${extra_cmd}" -c "set bg=dark fdl=9999 | syn enable | hi Normal ctermbg=NONE | silent! source ${script}" -c "set buftype=nowrite | ${extra_c} | call AnsiHighlight(\"${dest_file}\", \"${line_numbers}\") | qa!" -- "${file}" </dev/tty >/dev/null 2>&1
        fi

        if [ -z "${output_file}" -o "${output_file}" = "-" ]; then
          cat "${tmp_file_out}"
        fi

        if [ -z "${output_file}" ]; then
          # if file doesn't end in a newline, output a newline
          # regular Solaris tail does not work for this
          tail_cmd=tail
          if [ -x /usr/xpg4/bin/tail ]; then
            tail_cmd=/usr/xpg4/bin/tail
          fi
          if command -v gtail >/dev/null; then
            tail_cmd=gtail
          fi
          last_char="$($tail_cmd -c 1 "${tmp_file_out}")"
          if [ "${last_char}" != "" ]; then
            echo
          fi
        fi
      fi
    else
      echo "${0}: Cannot read file: ${file}" >&2
    fi
  done

  quit 0

: endif
: endif
: endif
: endif
: endif
: endif
: endif
: endif
: endif
: endif
: endif
: endif
: endif
: endfor
: endif
: endif
: endif
: endif
: endif
: endif
: endif
: endif
: endif
: endif
: endwhile
: endif
: endif
: endfor
: endif
: endif
: endif
: endif

" AnsiHighlight: Allows for marking up a file, using ANSI color escapes when
" the syntax changes colors, for easy, faithful reproduction.
" Author: Matthew Wozniski (mjw@drexel.edu)
" Date: Fri, 01 Aug 2008 05:22:55 -0400
" Version: 1.0 FIXME
" History: FIXME see :help marklines-history
" License: BSD. Completely open source, but I would like to be
" credited if you use some of this code elsewhere.

" Copyright (c) 2015, Matthew J. Wozniski {{{1
"
" Redistribution and use in source and binary forms, with or without
" modification, are permitted provided that the following conditions are met:
" * Redistributions of source code must retain the above copyright
" notice, this list of conditions and the following disclaimer.
" * Redistributions in binary form must reproduce the above copyright
" notice, this list of conditions and the following disclaimer in the
" documentation and/or other materials provided with the distribution.
"
" THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER ``AS IS'' AND ANY
" EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
" WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
" DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
" DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
" (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
" LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
" ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
" (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
" SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

" Turn off vi-compatible mode, unless it's already off {{{1
if &cp
  set nocp
endif

let s:type = 'cterm'
if &t_Co == 0
  let s:type = 'term'
endif

" Converts info for a highlight group to a string of ANSI color escapes {{{1
function! s:GroupToAnsi(groupnum)
  if ! exists("s:ansicache")
    let s:ansicache = {}
  endif

  let groupnum = a:groupnum

  if groupnum == 0
    let groupnum = hlID('Normal')
  endif

  if has_key(s:ansicache, groupnum)
    return s:ansicache[groupnum]
  endif

  let fg = synIDattr(groupnum, 'fg', s:type)
  let bg = synIDattr(groupnum, 'bg', s:type)
  let rv = synIDattr(groupnum, 'reverse', s:type)
  let bd = synIDattr(groupnum, 'bold', s:type)

  " FIXME other attributes?

  if rv == "" || rv == -1
    let rv = 0
  endif

  if bd == "" || bd == -1
    let bd = 0
  endif

  if rv
    let temp = bg
    let bg = fg
    let fg = temp
  endif

  if fg == "" || fg == -1
    unlet fg
  endif

  if !exists('fg') && groupnum != hlID('Normal')
    let fg = synIDattr(hlID('Normal'), 'fg', s:type)
    if fg == "" || fg == -1
      unlet fg
    endif
  endif

  if bg == "" || bg == -1
    unlet bg
  endif

  if !exists('bg')
    let bg = synIDattr(hlID('Normal'), 'bg', s:type)
    if bg == "" || bg == -1
      unlet bg
    endif
  endif

  let retv = "\<Esc>[22;24;25;27;28"

  if bd
    let retv .= ";1"
  endif

  if exists('fg') && fg < 8
    let retv .= ";3" . fg
  elseif exists('fg')  && fg < 16    "use aixterm codes
    let retv .= ";9" . (fg - 8)
  elseif exists('fg')                "use xterm256 codes
    let retv .= ";38;5;" . fg
  else
    let retv .= ";39"
  endif

  if exists('bg') && bg < 8
    let retv .= ";4" . bg
  elseif exists('bg') && bg < 16     "use aixterm codes
    let retv .= ";10" . (bg - 8)
  elseif exists('bg')                "use xterm256 codes
    let retv .= ";48;5;" . bg
  else
    let retv .= ";49"
  endif

  let retv .= "m"

  let s:ansicache[groupnum] = retv

  return retv
endfunction

function! AnsiHighlight(output_file, line_numbers)
  let retv = []

  if a:line_numbers
    let ln_field_len = len(line('$'))
  endif

  for lnum in range(1, line('$'))
    let last = hlID('Normal')
    let output = s:GroupToAnsi(last) . "\<Esc>[K" " Clear to right

        " Hopefully fix highlighting sync issues
    exe "norm! " . lnum . "G$"

    let line  = getline(lnum)
    let cnum  = 1

    while cnum <=# col('.')
      " skip ansi codes in the file
      if cnum <=# col('.') - 1 && line[cnum-1] ==# "\e" && line[cnum] ==# '['
        let cnum += 2
        while match(line[cnum-1], '[A-Za-z]') ==# -1
          let cnum += 1
        endwhile

        let cnum += 1
        continue
      endif

      let concealed = synconcealed(lnum, cnum)

      if empty(concealed) " no conceal feature
        let concealed = [0]
      endif

      if concealed[0] !=# 1 && synIDtrans(synID(lnum, cnum, 1)) != last
        let last = synIDtrans(synID(lnum, cnum, 1))
        let output .= s:GroupToAnsi(last)
      endif

      if concealed[0] ==# 1 && &conceallevel !=# 0
        if &conceallevel ==# 1 || &conceallevel ==# 2
          let output .= concealed[1]
        endif
      else
        let output .= line[cnum-1]
      endif
      "let line = substitute(line, '.', '', '')
            "let line = matchstr(line, '^\@<!.*')
      let cnum += 1
    endwhile

    if a:line_numbers
      let output = printf("\<Esc>[0m\<Esc>[37;1m%" . ln_field_len . "d ", lnum) . output
    endif

    let retv += [output]
  endfor
  " Reset the colors to default after displaying the file
  let retv[-1] .= "\<Esc>[0m"

  return writefile(retv, a:output_file)
endfunction

" See copyright in the vim script above (for the vim script) and in
" vimcat.md for the whole script.
"
" The list of contributors is at the bottom of the vimpager script in this
" project.
"
" vim: sw=2 sts=2 et ft=vim
